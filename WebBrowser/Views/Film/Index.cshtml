@using System.Web
@{
    Layout = "/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Xem phim";

    // Lấy token giống như trang chủ:
    var token = Context.Session.GetString("JWToken");
    var isLoggedIn = !string.IsNullOrEmpty(token);

    // ⛳️ Demo fallback – nếu Model chưa có, gán tạm dữ liệu mẫu để bạn preview UI.
    // Khi gắn thật, thay Model bằng ViewModel của bạn (MovieTitle, EpisodeList, Sources...)
    var movieTitle = ViewBag.MovieTitle as string ?? "Duty After School – Học Kỳ Sinh Tử";
    var movieYear = ViewBag.MovieYear as int? ?? 2024;
    var movieGenres = ViewBag.MovieGenres as string ?? "Hành động · Viễn tưởng · Hàn Quốc";
    var rating = ViewBag.Rating as double? ?? 8.4;
    var poster = ViewBag.Poster as string ?? "https://images.unsplash.com/photo-1524985069026-dd778a71c7b4?q=80&w=1600&auto=format&fit=crop";
    var description = ViewBag.Description as string ?? "Một lớp học bình thường phải tham gia chiến đấu để sinh tồn. Căng thẳng, kịch tính, và cảm xúc…";
    // Nguồn phát: mỗi item gồm (label + url). Ưu tiên nguồn m3u8 nếu có.
    var sources = ViewBag.Sources as IEnumerable<(string label, string url)> ??
        new List<(string, string)> {
            ("CDN-1 • 1080p (HLS)", "https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8"),
            ("CDN-2 • 720p (MP4)",  "https://khgcepyhcwfblvflclvp.supabase.co/storage/v1/object/public/images/products/53995d51-effd-4388-8f5d-7c9d397b4e3e.mp4")
        };
    var currentSource = sources.First().url;
    var episodes = ViewBag.Episodes as IEnumerable<(int ep, string title)> ??
        Enumerable.Range(1, 12).Select(i => (i, $"Tập {i:00} - Nhiệm vụ #{100 + i}"));
    var currentEp = ViewBag.CurrentEpisode as int? ?? 1;

    // Tạo danh sách chất lượng demo
    var qualities = new[] { "1080p", "720p", "480p" };
    var speeds = new[] { 0.75, 1.0, 1.25, 1.5, 2.0 };
}

@section Styles {
    <style>
        :root {
            --brand: #27d3c3;
            --brand2: #19b3a5;
            --dark: #0e1114;
            --panel: #12161a;
            --muted: #9fb1bd;
        }

        .watch-hero {
            position: relative;
            background: #0e1114 url('@poster') center/cover no-repeat;
            border-radius: 18px;
            min-height: 28vh;
            overflow: hidden;
        }

            .watch-hero::before {
                content: "";
                position: absolute;
                inset: 0;
                background: linear-gradient(140deg, rgba(0,0,0,.78), rgba(0,0,0,.45) 55%, rgba(0,0,0,.78));
            }

            .watch-hero .inner {
                position: relative;
                z-index: 2;
            }

        .badge-brand {
            background: linear-gradient(135deg,var(--brand),var(--brand2));
        }

        /* Player shell */
        .player-wrap {
            background: #000;
            border-radius: 18px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,.45);
            position: relative;
        }

        .video-el {
            width: 100%;
            background: #000;
        }

        .player-controls {
            position: absolute;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(180deg, rgba(0,0,0,0) 0, rgba(0,0,0,.65) 45%, rgba(0,0,0,.8));
            padding: .75rem .85rem;
            opacity: 1;
            transition: .25s;
        }

        .player-wrap.hide-ui .player-controls {
            opacity: 0;
            pointer-events: none;
        }

        .control-btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 42px;
            height: 42px;
            border-radius: 12px;
            background: rgba(255,255,255,.06);
            color: #eaf3f9;
            border: 1px solid rgba(255,255,255,.08);
            transition: .18s;
            cursor: pointer;
        }

            .control-btn:hover {
                transform: translateY(-2px);
                border-color: var(--brand);
                box-shadow: 0 8px 20px rgba(39,211,195,.18);
            }

        .progress-wrap {
            position: relative;
            height: 6px;
            background: rgba(255,255,255,.15);
            border-radius: 999px;
            cursor: pointer;
        }

        .progress-bar {
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 0;
            background: linear-gradient(90deg,var(--brand),#39f);
            border-radius: 999px;
        }

        .progress-buffer {
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 0;
            background: rgba(255,255,255,.25);
            border-radius: 999px;
        }

        .time-label {
            font-variant-numeric: tabular-nums;
            color: #d0e0ea;
            font-size: .9rem;
        }

        .opts-pill {
            background: #14181c;
            border: 1px solid rgba(255,255,255,.08);
            color: #d6e7f2;
            border-radius: 14px;
            padding: .4rem .7rem;
        }

            .opts-pill:focus {
                outline: 0;
                box-shadow: 0 0 0 .15rem rgba(39,211,195,.25);
                border-color: var(--brand);
            }

        .panel {
            background: #12161a;
            border-radius: 16px;
            border: 1px solid rgba(255,255,255,.08);
        }

        .panel-header {
            padding: .9rem 1rem;
            border-bottom: 1px solid rgba(255,255,255,.06);
        }

        .panel-body {
            padding: 1rem;
        }

        /* Theater mode */
        .theater .player-wrap {
            border-radius: 0;
        }

        .theater .page-container {
            max-width: 100% !important;
            padding-left: 0;
            padding-right: 0;
        }

        .kp {
            color: var(--muted);
        }

        /* Episode list */
        .ep-item {
            background: #14181c;
            border: 1px solid rgba(255,255,255,.06);
            border-radius: 12px;
            padding: .65rem .8rem;
            display: flex;
            gap: .65rem;
            align-items: center;
            cursor: pointer;
            transition: .18s;
        }

            .ep-item:hover {
                transform: translateY(-2px);
                border-color: var(--brand);
                box-shadow: 0 8px 20px rgba(39,211,195,.12);
            }

            .ep-item.active {
                border-color: var(--brand);
                background: linear-gradient(135deg, rgba(39,211,195,.08), rgba(0,0,0,.0));
            }

        .ep-num {
            width: 32px;
            height: 32px;
            border-radius: 10px;
            display: grid;
            place-items: center;
            background: rgba(255,255,255,.08);
        }

        /* Mini sticky (PIP substitute on scroll) */
        .mini {
            position: fixed;
            width: 360px;
            right: 16px;
            bottom: 16px;
            z-index: 1050;
            transform: translateY(0);
            transition: .25s;
            box-shadow: 0 10px 30px rgba(0,0,0,.45);
        }

            .mini.hide {
                transform: translateY(140%);
            }

            .mini .player-wrap {
                border-radius: 14px;
            }

        /* Skeleton while loading */
        .skeleton {
            animation: pulse 1.2s ease-in-out infinite alternate;
            background: linear-gradient(90deg, #1a1f25, #212832, #1a1f25);
            background-size: 200% 100%;
        }
        @@keyframes pulse {
            to

        {
            background-position: 200% 0;
        }

        }
    </style>
}

<div class="container page-container my-4">
    <!-- Header info -->
    <div class="watch-hero p-4 p-md-5 mb-4">
        <div class="inner">
            <span class="badge badge-brand">Đang phát</span>
            <h1 class="display-6 fw-bold mt-2">@movieTitle</h1>
            <div class="text-secondary">@movieYear • @movieGenres</div>
            <div class="d-flex align-items-center gap-3 mt-2">
                <span class="text-warning"><i class="bi bi-star-fill"></i> @rating</span>
                <button class="btn btn-sm btn-outline-light rounded-pill" id="btnLike"><i class="bi bi-hand-thumbs-up"></i> Thích</button>
                <button class="btn btn-sm btn-outline-light rounded-pill" id="btnSave"><i class="bi bi-plus-circle"></i> Thêm vào danh sách</button>
                <button class="btn btn-sm btn-outline-light rounded-pill" id="btnReport"><i class="bi bi-flag"></i> Báo lỗi</button>
            </div>
            <p class="mt-3 text-light">@description</p>
        </div>
    </div>

    <!-- Player + Options -->
    <div class="row g-4">
        <div class="col-12 col-lg-8">
            <div id="playerBox" class="player-wrap">
                <video id="video" class="video-el" playsinline preload="metadata" poster="@poster"></video>

                <!-- Controls -->
                <div class="player-controls">
                    <div class="mb-2">
                        <div id="progress" class="progress-wrap">
                            <div id="buffered" class="progress-buffer"></div>
                            <div id="bar" class="progress-bar"></div>
                        </div>
                    </div>
                    <div class="d-flex flex-wrap align-items-center gap-2">
                        <button class="control-btn" id="btnPlay"><i class="bi bi-play-fill"></i></button>
                        <button class="control-btn" id="btnBack"><i class="bi bi-skip-backward-fill"></i></button>
                        <button class="control-btn" id="btnFwd"><i class="bi bi-skip-forward-fill"></i></button>

                        <div class="d-flex align-items-center ms-2">
                            <i class="bi bi-volume-up me-2 text-light"></i>
                            <input type="range" id="vol" min="0" max="1" step="0.01" value="1" class="form-range" style="width:140px">
                        </div>

                        <div class="ms-auto d-flex align-items-center gap-2">
                            <span class="time-label" id="time">00:00 / 00:00</span>

                            <select id="selSpeed" class="opts-pill">
                                @foreach (var s in speeds)
                                {
                                    <option value="@s" selected="@(s == 1.0)">@s x</option>
                                }
                            </select>
                            <button class="control-btn" id="btnTheater" title="Rạp tối"><i class="bi bi-aspect-ratio"></i></button>
                            <button class="control-btn" id="btnPip" title="Picture in Picture"><i class="bi bi-window"></i></button>
                            <button class="control-btn" id="btnFs"><i class="bi bi-arrows-fullscreen"></i></button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Source / Quality / Nav -->
            <div class="d-flex flex-wrap gap-2 mt-3">
                <select id="selServer" class="opts-pill">
                    @foreach (var (label, url) in sources)
                    {
                        <option value="@url">@label</option>
                    }
                </select>

                <select id="selQuality" class="opts-pill">
                    @foreach (var q in qualities)
                    {
                        <option>@q</option>
                    }
                </select>

                <div class="ms-auto d-flex gap-2">
                    <a href="javascript:void(0)" id="btnPrev" class="btn btn-outline-light"><i class="bi bi-arrow-left"></i> Tập trước</a>
                    <a href="javascript:void(0)" id="btnNext" class="btn btn-primary">Tập tiếp <i class="bi bi-arrow-right"></i></a>
                </div>
            </div>

            <!-- Ghi chú phím tắt -->
            <div class="small kp mt-2"><i class="bi bi-keyboard"></i> Phím tắt: <b>Space</b> phát/tạm dừng, <b>←/→</b> tua 10s, <b>↑/↓</b> âm lượng, <b>F</b> full, <b>T</b> rạp tối, <b>P</b> PIP.</div>

            <!-- Bình luận -->
            <div class="panel mt-4">
                <div class="panel-header d-flex align-items-center justify-content-between">
                    <div class="fw-semibold">Bình luận</div>
                    <span class="text-secondary small">Quy tắc cộng đồng áp dụng</span>
                </div>
                <div class="panel-body">
                    @if (!isLoggedIn)
                    {
                        <div class="alert alert-warning">Bạn cần đăng nhập để bình luận.</div>
                    }
                    else
                    {
                        <div class="d-flex gap-2">
                            <img src="https://i.pravatar.cc/40?u=you" class="rounded-circle" width="40" height="40" />
                            <div class="flex-grow-1">
                                <textarea id="cmt" class="form-control mb-2" rows="2" placeholder="Viết gì đó…"></textarea>
                                <button class="btn btn-sm btn-primary" id="btnCmt"><i class="bi bi-send"></i> Gửi</button>
                            </div>
                        </div>
                    }
                    <div class="mt-3" id="cmtList">
                        <!-- demo comments -->
                        <div class="d-flex gap-2 mb-3">
                            <img src="https://i.pravatar.cc/36?u=a" class="rounded-circle" width="36" height="36" />
                            <div>
                                <div class="fw-semibold">UserA <span class="text-secondary small">• 2 giờ trước</span></div>
                                <div>Phim căng thật, nhạc quá cháy 🔥</div>
                            </div>
                        </div>
                        <div class="d-flex gap-2">
                            <img src="https://i.pravatar.cc/36?u=b" class="rounded-circle" width="36" height="36" />
                            <div>
                                <div class="fw-semibold">UserB <span class="text-secondary small">• 1 giờ trước</span></div>
                                <div>Tập sau chắc bùng nổ 🚀</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

        <!-- Sidebar: Episode list + Related -->
        <div class="col-12 col-lg-4">
            <div class="panel mb-4">
                <div class="panel-header d-flex align-items-center justify-content-between">
                    <div class="fw-semibold">Danh sách tập</div>
                    <span class="text-secondary small">(@episodes.Count() tập)</span>
                </div>
                <div class="panel-body">
                    <div class="vstack gap-2" id="epList">
                        @foreach (var (ep, title) in episodes)
                        {
                            var act = ep == currentEp ? "active" : "";
                            <div class="ep-item @act" data-ep="@ep">
                                <div class="ep-num">@ep</div>
                                <div class="flex-grow-1">
                                    <div class="fw-semibold small">@title</div>
                                    <div class="text-secondary small">HD • Vietsub</div>
                                </div>
                                <i class="bi bi-play-circle fs-5 text-light"></i>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="panel">
                <div class="panel-header fw-semibold">Có thể bạn thích</div>
                <div class="panel-body">
                    <div class="row g-2">
                        @for (int i = 1; i <= 6; i++)
                        {
                            <div class="col-6">
                                <a class="text-decoration-none" href="#">
                                    <div class="ratio ratio-16x9 skeleton rounded-3 mb-2" style="background-image:url('https://picsum.photos/300/180?random=@(500 + i)'); background-size:cover;"></div>
                                    <div class="small text-light">Gợi ý @i</div>
                                    <div class="small text-secondary">8.@i • 202@i</div>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<!-- Modal: yêu cầu đăng nhập -->
<div class="modal fade" id="loginRequiredModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-light border border-secondary">
            <div class="modal-header border-0">
                <h5 class="modal-title"><i class="bi bi-shield-lock-fill me-2 text-warning"></i>Cần đăng nhập</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">Bạn cần đăng nhập để xem nội dung này.</div>
            <div class="modal-footer border-0">
                <a class="btn btn-primary" asp-controller="Auth" asp-action="Index"><i class="bi bi-box-arrow-in-right me-1"></i>Đăng nhập</a>
                <button type="button" class="btn btn-outline-light" data-bs-dismiss="modal">Để sau</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- HLS for m3u8 -->
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script>
        const isLoggedIn = @isLoggedIn.ToString().ToLower();

        function guardAuth(action) {
            if (!isLoggedIn) {
                const el = document.getElementById('loginRequiredModal');
                const m = bootstrap.Modal.getOrCreateInstance(el);
                m.show();
                return false;
            }
            return typeof action === 'function' ? (action(), true) : true;
        }

        // ====== Player setup ======
        const video = document.getElementById('video');
        const bar = document.getElementById('bar');
        const buffered = document.getElementById('buffered');
        const progress = document.getElementById('progress');
        const time = document.getElementById('time');
        const btnPlay = document.getElementById('btnPlay');
        const btnBack = document.getElementById('btnBack');
        const btnFwd = document.getElementById('btnFwd');
        const btnFs = document.getElementById('btnFs');
        const btnPip = document.getElementById('btnPip');
        const btnTheater = document.getElementById('btnTheater');
        const selSpeed = document.getElementById('selSpeed');
        const selServer = document.getElementById('selServer');
        const selQuality = document.getElementById('selQuality');
        const btnPrev = document.getElementById('btnPrev');
        const btnNext = document.getElementById('btnNext');
        const vol = document.getElementById('vol');
        const playerBox = document.getElementById('playerBox');

        // Persist progress per (movie,episode)
        const movieKey = "movie:@(HttpUtility.JavaScriptStringEncode(movieTitle))";
        let currentEp = @currentEp;

        function fmt(sec){
            sec = Math.max(sec||0,0);
            const h = Math.floor(sec/3600);
            const m = Math.floor((sec%3600)/60);
            const s = Math.floor(sec%60);
            return (h>0?String(h).padStart(2,'0')+':':'')+String(m).padStart(2,'0')+':'+String(s).padStart(2,'0');
        }

        function loadSource(url){
            // Block if not logged in
            if (!isLoggedIn) {
                guardAuth();
                return;
            }
            // Save last server choice
            localStorage.setItem(movieKey + ":server", url);

            // m3u8 via Hls
            if (url.endsWith(".m3u8") && window.Hls && Hls.isSupported()) {
                if (video.hlsInstance) { video.hlsInstance.destroy(); }
                const hls = new Hls({ maxBufferLength: 30 });
                hls.loadSource(url);
                hls.attachMedia(video);
                video.hlsInstance = hls;
            } else {
                if (video.hlsInstance) { video.hlsInstance.destroy(); video.hlsInstance = null; }
                video.src = url;
            }

            // resume time
            const resume = +localStorage.getItem(`${movieKey}:ep:${currentEp}:t`) || 0;
            video.currentTime = Math.max(0, resume - 2);
            video.play().catch(()=>{});
            btnPlay.innerHTML = '<i class="bi bi-pause-fill"></i>';
        }

        // init defaults
        (function initSelections(){
            // set server selection & events
            const last = localStorage.getItem(movieKey + ":server");
            if (last) [...selServer.options].forEach(o => { if (o.value === last) selServer.value = last; });
            selServer.addEventListener('change', e => guardAuth(()=> loadSource(e.target.value)));

            // quality is cosmetic demo (hook API switch here)
            selQuality.addEventListener('change', () => {
                const q = selQuality.value;
                // TODO: nếu bạn có nhiều url theo quality, hãy loadSource(url_theo_q);
                // Hiệu ứng nháy nhẹ báo đổi chất lượng
                playerBox.classList.add('hide-ui');
                setTimeout(()=> playerBox.classList.remove('hide-ui'), 200);
            });
        })();

        // autoplay first (blocked if guest)
        (function autoPlay(){
            const firstUrl = selServer.value || '@currentSource';
            if (isLoggedIn) loadSource(firstUrl);
        })();

        // Controls
        btnPlay.addEventListener('click', () => guardAuth(()=>{
            if (video.paused) { video.play(); btnPlay.innerHTML = '<i class="bi bi-pause-fill"></i>'; }
            else { video.pause(); btnPlay.innerHTML = '<i class="bi bi-play-fill"></i>'; }
        }));
        btnBack.addEventListener('click', () => guardAuth(()=> video.currentTime -= 10));
        btnFwd.addEventListener('click', () => guardAuth(()=> video.currentTime += 10));

        vol.addEventListener('input', e => video.volume = +e.target.value);
        selSpeed.addEventListener('change', e => video.playbackRate = +e.target.value);

        btnFs.addEventListener('click', () => guardAuth(()=>{
            if (!document.fullscreenElement) playerBox.requestFullscreen().catch(()=>{});
            else document.exitFullscreen();
        }));
        btnPip.addEventListener('click', () => guardAuth(()=>{
            if (document.pictureInPictureElement) document.exitPictureInPicture();
            else if (document.pictureInPictureEnabled) video.requestPictureInPicture().catch(()=>{});
        }));
        btnTheater.addEventListener('click', () => {
            // Theater không cần login
            document.body.classList.toggle('theater');
        });

        // Progress UI
        video.addEventListener('timeupdate', ()=>{
            const p = (video.currentTime / (video.duration||1))*100;
            bar.style.width = p + '%';
            time.textContent = `${fmt(video.currentTime)} / ${fmt(video.duration)}`;
            // save progress each 2s
            if (Math.floor(video.currentTime)%2===0) {
                localStorage.setItem(`${movieKey}:ep:${currentEp}:t`, String(Math.floor(video.currentTime)));
            }
        });
        video.addEventListener('progress', ()=>{
            try {
                if (video.buffered.length) {
                    const end = video.buffered.end(video.buffered.length-1);
                    const b = (end/(video.duration||1))*100;
                    buffered.style.width = b + '%';
                }
            } catch {}
        });
        progress.addEventListener('click', e => guardAuth(()=>{
            const r = progress.getBoundingClientRect();
            const ratio = (e.clientX - r.left)/r.width;
            video.currentTime = ratio * (video.duration||0);
        }));

        // Hotkeys
        window.addEventListener('keydown', (e)=>{
            const tag = (e.target.tagName||'').toLowerCase();
            if (['input','textarea'].includes(tag)) return; // don't hijack typing
            if (e.code === 'Space'){ e.preventDefault(); btnPlay.click(); }
            else if (e.code === 'ArrowLeft'){ e.preventDefault(); btnBack.click(); }
            else if (e.code === 'ArrowRight'){ e.preventDefault(); btnFwd.click(); }
            else if (e.key.toLowerCase()==='f'){ e.preventDefault(); btnFs.click(); }
            else if (e.key.toLowerCase()==='t'){ e.preventDefault(); btnTheater.click(); }
            else if (e.key.toLowerCase()==='p'){ e.preventDefault(); btnPip.click(); }
            else if (e.key === 'ArrowUp'){ e.preventDefault(); vol.value = Math.min(1, (+vol.value + .05)).toFixed(2); vol.dispatchEvent(new Event('input')); }
            else if (e.key === 'ArrowDown'){ e.preventDefault(); vol.value = Math.max(0, (+vol.value - .05)).toFixed(2); vol.dispatchEvent(new Event('input')); }
        });

        // Episode navigation
        const epList = document.getElementById('epList');
        epList.addEventListener('click', (e)=>{
            const item = e.target.closest('.ep-item');
            if (!item) return;
            const ep = +item.dataset.ep;
            if (ep === currentEp) return;
            guardAuth(()=>{
                // TODO: gọi API lấy url theo tập (ở đây demo đổi poster & reset progress)
                currentEp = ep;
                document.querySelectorAll('.ep-item').forEach(i=> i.classList.toggle('active', i===item));
                const url = selServer.value; // vẫn dùng server hiện tại
                localStorage.setItem(`${movieKey}:last_ep`, String(currentEp));
                loadSource(url);
            });
        });

        btnPrev.addEventListener('click', ()=>{
            const prev = Math.max(1, currentEp - 1);
            const card = document.querySelector(`.ep-item[data-ep="${prev}"]`);
            card?.click();
        });
        btnNext.addEventListener('click', ()=>{
            const next = Math.min(@episodes.Count(), currentEp + 1);
            const card = document.querySelector(`.ep-item[data-ep="${next}"]`);
            card?.click();
        });

        // Sticky mini-player on scroll when not in PiP/fullscreen
        let miniEl;
        function ensureMini(){
            if (!miniEl) {
                miniEl = document.createElement('div');
                miniEl.className = 'mini hide';
                miniEl.innerHTML = `<div class="player-wrap"><video id="mini" class="video-el" muted></video></div>`;
                document.body.appendChild(miniEl);
                const mv = miniEl.querySelector('#mini');
                // Mirror main video via MediaStream (Chrome supports captureStream)
                if (video.captureStream) {
                    const stream = video.captureStream();
                    mv.srcObject = stream;
                    mv.play().catch(()=>{});
                }
                miniEl.addEventListener('click', ()=> {
                    window.scrollTo({ top: playerBox.getBoundingClientRect().top + window.scrollY - 80, behavior:'smooth' });
                });
            }
        }
        const onScroll = ()=>{
            const rect = playerBox.getBoundingClientRect();
            const outOfView = rect.bottom < 64 || rect.top < -200;
            if (document.pictureInPictureElement || document.fullscreenElement) return;
            if (outOfView) { ensureMini(); miniEl.classList.remove('hide'); }
            else { miniEl?.classList.add('hide'); }
        };
        window.addEventListener('scroll', onScroll);

        // UI auto hide (mousemove over player)
        let fadeTimer;
        playerBox.addEventListener('mousemove', ()=>{
            playerBox.classList.remove('hide-ui');
            clearTimeout(fadeTimer);
            fadeTimer = setTimeout(()=> playerBox.classList.add('hide-ui'), 2000);
        });

        // Action buttons (like/save/report) – demo
        function needLoginToast(){
            const alertEl = document.createElement('div');
            alertEl.className = 'alert alert-warning position-fixed end-0 bottom-0 m-3';
            alertEl.style.zIndex = 1080;
            alertEl.innerHTML = '<i class="bi bi-exclamation-triangle me-1"></i> Bạn cần đăng nhập để sử dụng tính năng này.';
            document.body.appendChild(alertEl);
            setTimeout(()=> alertEl.remove(), 2000);
        }
        document.getElementById('btnLike').addEventListener('click',()=> isLoggedIn ? (bootstrap.Toast && 0) : needLoginToast());
        document.getElementById('btnSave').addEventListener('click',()=> isLoggedIn ? (bootstrap.Toast && 0) : needLoginToast());
        document.getElementById('btnReport').addEventListener('click',()=> isLoggedIn ? alert('Đã gửi báo cáo!') : needLoginToast());

        // If guest: click player opens login modal
        playerBox.addEventListener('click', (e)=>{
            if (!isLoggedIn) {
                e.preventDefault(); e.stopPropagation();
                guardAuth();
            }
        });
    </script>
}
