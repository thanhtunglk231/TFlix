@{
    var ctrl = ViewContext.RouteData.Values["controller"]?.ToString() ?? "";
    var act = ViewContext.RouteData.Values["action"]?.ToString() ?? "";
    Func<string, string, bool> isActive = (c, a) =>
        string.Equals(ctrl, c, StringComparison.OrdinalIgnoreCase) &&
        string.Equals(act, a, StringComparison.OrdinalIgnoreCase);
}
<!doctype html>
<html lang="vi" data-bs-theme="dark">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@(ViewData["Title"] ?? "Admin · Movie App")</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />
    <style>
        :root {
            --sidebar-width: 280px;
        }

        html, body {
            height: 100%;
        }

        body {
            overflow: hidden;
        }

        .app {
            display: grid;
            grid-template-rows: auto 1fr;
            height: 100%;
        }

        .app-main {
            display: grid;
            grid-template-columns: var(--sidebar-width) 1fr;
            min-height: 0;
        }

        .sidebar {
            overflow: auto;
            border-right: 1px solid var(--bs-border-color);
        }

        .content {
            overflow: auto;
        }

        @@media (max-width: 991.98px) {
            .app-main

        {
            grid-template-columns: 0 1fr;
        }

        .sidebar {
            position: fixed;
            inset: 0 auto 0 0;
            width: var(--sidebar-width);
            z-index: 1050;
            transform: translateX(-100%);
            transition: transform .25s ease;
        }

            .sidebar.show {
                transform: translateX(0);
                box-shadow: 0 0 2rem rgba(0,0,0,.4);
            }

        body.sidebar-open {
            overflow: hidden;
        }

        }

        .sidebar .nav-link {
            color: var(--bs-body-color);
        }

            .sidebar .nav-link.active, .sidebar .nav-link:hover {
                background: rgba(255,255,255,.06);
            }

        .card {
            border-radius: 1rem;
        }

        .table thead th {
            position: sticky;
            top: 0;
            background: var(--bs-body-bg);
            z-index: 1;
        }

        .chip {
            border: 1px solid var(--bs-border-color);
            padding: .125rem .5rem;
            border-radius: 10rem;
            font-size: .75rem;
        }
    </style>
    @RenderSection("Styles", required: false)
</head>
<body>
    <div class="app">
        @await Html.PartialAsync("_Topbar")
        <div class="app-main">
            @await Html.PartialAsync("_Sidebar", new ViewDataDictionary(ViewData) { { "isActive", isActive } })
            <main class="content p-3 p-lg-4 bg-body-tertiary">
                <div class="container-fluid">
                    @RenderBody()
                </div>
            </main>
        </div>
    </div>

    @await Html.PartialAsync("_Toast")

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

   
    @RenderSection("Scripts", required: false)
</body>
</html>
